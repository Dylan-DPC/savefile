{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Struct",
				"StructWithAnotherType\t  struct StructWithAnotherType"
			],
			[
				"exi",
				"exists_version_which_needs_default_value\t  let mut exists_version_which_needs_default_value=false;"
			],
			[
				"deseri",
				"deserialize"
			],
			[
				"vers",
				"version_type\t  let version_type = output2[1];"
			],
			[
				"VErs",
				"VersionRange\t  struct VersionRange"
			],
			[
				"Version",
				"VersionRange\t  struct VersionRange"
			],
			[
				"Token",
				"TokenStream"
			],
			[
				"default_val",
				"default_val_str_lit"
			],
			[
				"Deser",
				"Deserializer"
			],
			[
				"des",
				"deserialize"
			],
			[
				"seri",
				"Serializer"
			],
			[
				"Bench",
				"BenchStruct"
			],
			[
				"de",
				"deserialize"
			],
			[
				"seria",
				"serialized"
			],
			[
				"Schem",
				"SchemaStruct"
			],
			[
				"Vari",
				"VariantA"
			],
			[
				"Var",
				"VariantA"
			],
			[
				"Deft",
				"DefTraitEnum"
			],
			[
				"DefTra",
				"DefTraitTest"
			],
			[
				"read_",
				"read_string"
			],
			[
				"to",
				"to_string"
			],
			[
				"Sch",
				"SchemaPrimitive"
			],
			[
				"disc",
				"discriminator"
			],
			[
				"Inc",
				"IncompatibleSchema"
			],
			[
				"with",
				"withschema"
			],
			[
				"imple",
				"implement_withschema"
			],
			[
				"impleme",
				"implement_reprc"
			],
			[
				"named",
				"namedfields"
			],
			[
				"regular_",
				"regular_deserialize_vec Function (savefile.rs) : fn regular_deserialize_vec<T>(deserializer: &mut Deserializer) -> Self"
			],
			[
				"memo",
				"memory_version"
			],
			[
				"field",
				"field_to_version   Let (lib.rs) : let (field_from_version, field_to_version, default_trait, default_val) = ("
			],
			[
				"field_",
				"field_to_version   Let (lib.rs) : let (field_from_version,field_to_version,default_trait,default_val) ="
			],
			[
				"default",
				"default_val_str  Let (lib.rs) : let default_val_str:String=match &x.lit {            "
			],
			[
				"version",
				"version_number1"
			],
			[
				"def",
				"default_val   StructField (lib.rs) : Option<syn::Lit>"
			],
			[
				"Tets",
				"TestEnum     Enum (lib.rs) : enum TestEnum {   "
			],
			[
				"cur",
				"curspan"
			],
			[
				"water",
				"water_vapor_content"
			],
			[
				"inspe",
				"inspect_level Let (meteo3.rs) : let mut inspect_level=0\\                                                              "
			],
			[
				"all_",
				"all_empty                    Let (meteo3.rs) : let mut all_empty=true\\                                                                 "
			],
			[
				"CL",
				"CLOUD_DENSITY_LIMIT Const (meteo3.rs) : const CLOUD_DENSITY_LIMIT:f32=0.01\\                   "
			],
			[
				"prec",
				"precipitation"
			],
			[
				"air",
				"air_temperature"
			],
			[
				"GRID_",
				"GRID_CELL_SIZE_M                       Const (meteo3.rs) : const GRID_CELL_SIZE_M:f32=1000.0\\             "
			],
			[
				"wat",
				"water_vapor_content"
			],
			[
				"advect_",
				"advect_vertical_component! Macro (meteo3.rs) : macro_rules! advect_vertical_component {                                                "
			],
			[
				"precip",
				"precipitation"
			],
			[
				"LEVEL",
				"LEVEL_SPACING     Const (meteo3.rs) : const LEVEL_SPACING:f32=500.0\\                                                  "
			],
			[
				"advect",
				"advect_component_impl"
			],
			[
				"GRIDS",
				"GRID_SIZE_X                            Const (meteo3.rs) : const GRID_SIZE_X:i32=10\\                      "
			],
			[
				"particle",
				"particle_identity For (meteo2.rs) : for (particle_identity,particle) in self.particles.iter_mut().enumerate()"
			],
			[
				"get_cel",
				"get_cell_idx Function (meteo2.rs) : fn get_cell_idx(&self,x:f64,z:f64) -> usize"
			],
			[
				"total_",
				"total_mass_temperature_product Let (meteo2.rs) : let mut total_mass_temperature_product:f64=0.0\\                                                                                                 "
			],
			[
				"total_mas",
				"total_mass_temperature_product"
			],
			[
				"last",
				"last_acceleration_mass_product"
			],
			[
				"last_",
				"last_acceleration"
			],
			[
				"last_ac",
				"last_acceleration_mass_product"
			],
			[
				"acc",
				"acceleration_y      Let (meteo.rs) : let acceleration_y=f_south/(0.5*(cell.mass+south_buddy_mass))\\                          "
			],
			[
				"at",
				"at_mut                           Function (meteo.rs) : fn at_mut(&mut self,x:usize,y:usize,z:usize) -> &mut AtmoCell                                                        "
			],
			[
				"acce",
				"acceleration_y Let (meteo.rs) : let acceleration_y=f_south/(0.5*(cell.mass+south_buddy_mass))\\"
			],
			[
				"west_",
				"west_neighbor_and_cell Function (meteo.rs) : fn west_neighbor_and_cell(&mut self,x:usize,y:usize,z:usize) -> (&mut AtmoCell,&mut AtmoCell)"
			],
			[
				"get_tile",
				"get_def_tile"
			],
			[
				"get_",
				"get_def_tile"
			],
			[
				"have_",
				"have_low_neighbor  Let (lib.rs) : let mut have_low_neighbor\\                                            "
			],
			[
				"he",
				"height"
			],
			[
				"seen_age",
				"seen_agents"
			],
			[
				"seen_",
				"seen_agent_idx"
			],
			[
				"Relat",
				"RelativeScreenRect Struct (geometry.rs) : pub struct RelativeScreenRect"
			],
			[
				"Global",
				"GlobalUiVec2     Struct (geometry.rs) : pub struct GlobalUiVec2    "
			],
			[
				"Rela",
				"RelativeScreenRect Struct (geometry.rs) : pub struct RelativeScreenRect"
			],
			[
				"anim",
				"animation_state"
			],
			[
				"cur_vehi",
				"cur_vehicle_model  For (generic_toolkit.rs) : for cur_vehicle_model in cur_vehicle_models.iter()                                          "
			],
			[
				"rotation",
				"rotation_speed"
			],
			[
				"cur_",
				"cur_vehicle_model  For (generic_toolkit.rs) : for cur_vehicle_model in cur_vehicle_models.iter()                                          "
			],
			[
				"mat",
				"transforms         StructField (vehicle_model.rs) : Vec<self::nalgebra::Matrix4<f32>>                       "
			],
			[
				"tu",
				"turbine_blades    StructField (vehicle_model.rs) : u8                                                                                                 "
			],
			[
				"vehicle_ver",
				"vehicle_vertex_buffer"
			],
			[
				"turbin",
				"turbine_blades StructField (vehicle_model.rs) : u8"
			],
			[
				"compre",
				"compressor_blades StructField (vehicle_model.rs) : u8"
			],
			[
				"Vehile",
				"VehicleModelProperties Enum (vehicle_model.rs) : pub enum VehicleModelProperties  "
			],
			[
				"Vehicl",
				"VehicleModel"
			],
			[
				"JEtE",
				"JetEngineViewModel"
			],
			[
				"super",
				"supersonic_intake_factor"
			],
			[
				"by",
				"bypass_ratio"
			],
			[
				"Veti",
				"VerticalStrategy"
			],
			[
				"JetEn",
				"JetEngineMaterial"
			],
			[
				"Text",
				"TextBoxReadonlyness Enum (textbox.rs) : pub enum TextBoxReadonlyness"
			],
			[
				"Vertical",
				"VerticalStrategy"
			],
			[
				"toolkit",
				"toolkit_helpers"
			],
			[
				"sub",
				"Sub"
			],
			[
				"maybe",
				"maybe_control_points"
			],
			[
				"Triangles",
				"TrianglesList          EnumVariant (mod.rs) : TrianglesList,         "
			],
			[
				"Alig",
				"VerticalAlignment"
			],
			[
				"allo",
				"allowed_vertical_space FnArg (graphhelpers.rs) : allowed_vertical_space                              "
			],
			[
				"Size",
				"SizeUiVec2         Struct (generic_toolkit.rs) : pub struct SizeUiVec2                                 "
			],
			[
				"Siez",
				"SizeUiVec2"
			],
			[
				"bottom",
				"bottom_right"
			],
			[
				"Rel",
				"RelativeUiVec2     Struct (generic_toolkit.rs) : pub struct RelativeUiVec2    "
			],
			[
				"horiz",
				"horizontal_alignment"
			],
			[
				"ver",
				"vertical_alignment"
			],
			[
				"Globa",
				"GlobalUiVec2      Struct (generic_toolkit.rs) : pub struct GlobalUiVec2     "
			],
			[
				"Aircraft",
				"AircraftViewModel Struct (aircraft_editor.rs) : pub struct AircraftViewModel"
			],
			[
				"Sip",
				"SimpleTextLayout"
			],
			[
				"foc",
				"focus"
			],
			[
				"Mouse",
				"MouseEventType   Enum (generic_toolkit.rs) : enum MouseEventType  "
			],
			[
				"Rhy",
				"RhythmIdeaBeat Struct (newmelody.rs) : pub struct RhythmIdeaBeat        "
			],
			[
				"beat",
				"beat_length"
			],
			[
				"rhy",
				"rhythm_index Let (lib.rs) : let mut rhythm_index=0\\"
			],
			[
				"rh",
				"rhythm_index                 Let (lib.rs) : let mut rhythm_index=0\\                                                                                 "
			],
			[
				"ex",
				"expression_freqs"
			],
			[
				"cutoff",
				"cutoff_freq"
			],
			[
				"Filter",
				"FilterType"
			],
			[
				"in",
				"window   StructField (lib.rs) : Vec<f32>                                     "
			],
			[
				"Rhyth",
				"RhythmBar        Struct (lib.rs) : struct RhythmBar             "
			],
			[
				"Rhythm",
				"RhythmicBeat     Struct (lib.rs) : struct RhythmicBeat          "
			],
			[
				"rela",
				"RelativeNoteTime"
			],
			[
				"R",
				"Rhythm           Struct (lib.rs) : struct Rhythm                "
			],
			[
				"Rhyt",
				"RhythmicBeat     Struct (lib.rs) : struct RhythmicBeat          "
			],
			[
				"Ral",
				"RelativeNoteTime"
			],
			[
				"Relative",
				"RelativeNoteTime"
			],
			[
				"Air",
				"AircraftBlueprint  Struct (lib.rs) : pub struct AircraftBlueprint "
			],
			[
				"source",
				"source_node_index"
			],
			[
				"pickup",
				"pickup_quantity"
			],
			[
				"M",
				"MaterialType    Enum (lib.rs) : pub enum MaterialType              "
			],
			[
				"is",
				"is_ok             Function (result.rs) : pub fn is_ok(&self) -> bool                                                  "
			],
			[
				"debu",
				"dump_debug_case FnArg (lib.rs) : dump_debug_case                                                                                                    "
			],
			[
				"uwnra",
				"unwrap_or"
			],
			[
				"Portal",
				"PortalDirection  Enum (lib.rs) : enum PortalDirection                                    "
			]
		]
	},
	"buffers":
	[
		{
			"file": "savefile-derive/src/lib.rs",
			"settings":
			{
				"buffer_size": 48098,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile/src/savefile.rs",
			"settings":
			{
				"buffer_size": 58467,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile/src/lib.rs",
			"settings":
			{
				"buffer_size": 13654,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-test/Cargo.toml",
			"settings":
			{
				"buffer_size": 263,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-test/src/lib.rs",
			"settings":
			{
				"buffer_size": 9570,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-derive/Cargo.lock",
			"settings":
			{
				"buffer_size": 1809,
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-test/src/test_versioning.rs",
			"settings":
			{
				"buffer_size": 5680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-test/src/test_nested_non_repr_c.rs",
			"settings":
			{
				"buffer_size": 561,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-test/src/test_nested_repr_c.rs",
			"settings":
			{
				"buffer_size": 855,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": ".travis.yml",
			"settings":
			{
				"buffer_size": 66,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 4080,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile/src/prelude.rs",
			"settings":
			{
				"buffer_size": 294,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile-derive/Cargo.toml",
			"settings":
			{
				"buffer_size": 571,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "savefile/Cargo.toml",
			"settings":
			{
				"buffer_size": 590,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Rust Enhanced/RustEnhanced.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Run Release"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Release"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Document"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Script"
				]
			],
			[
				"Packages/Rust Enhanced/Cargo.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Automatic"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Check"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Document"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Script"
				]
			],
			[
				"Packages/Rust Enhanced/RustEnhanced.sublime-build",
				"Check"
			]
		],
		[
			[
				[
					"Packages/Rust/Cargo.sublime-build",
					""
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Run"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Test"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust/Rust.sublime-build",
					""
				],
				[
					"Packages/Rust/Rust.sublime-build",
					"Run"
				]
			],
			[
				"Packages/Rust/Cargo.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 92.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"rust configu",
				"Rust: Configure Cargo Build"
			],
			[
				"rempve",
				"Package Control: Remove Package"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/anders/savefile",
		"/home/anders/savefile/savefile",
		"/home/anders/savefile/savefile/src",
		"/home/anders/savefile/savefile-derive",
		"/home/anders/savefile/savefile-derive/src",
		"/home/anders/savefile/savefile-test",
		"/home/anders/savefile/savefile-test/src"
	],
	"file_history":
	[
		"/home/anders/savefile/savefile/src/savefile.rs",
		"/home/anders/savefile/README.md",
		"/home/anders/savefile/savefile-derive/Cargo.lock",
		"/home/anders/savefile/savefile-derive/src/prelude.rs",
		"/home/anders/savefile/savefile-derive/src/savefile.rs",
		"/home/anders/savefile/src/lib.rs",
		"/home/anders/diskstore/Cargo.toml",
		"/home/anders/octosim/diskstore/src/lib.rs",
		"/home/anders/octosim/diskstore/Cargo.toml",
		"/home/anders/octosim/diskstore/diskstore-derive/src/lib.rs",
		"/home/anders/octosim/simlib/src/simlib/aircraft.rs",
		"/home/anders/octosim/fractal/src/meteo3.rs",
		"/home/anders/octosim/music/src/lib.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/scrollview.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/slider.rs",
		"/home/anders/octosim/fractal/src/lib.rs",
		"/home/anders/octosim/src/main.rs",
		"/home/anders/octosim/music/src/noise.rs",
		"/home/anders/octosim/sight/src/lib.rs",
		"/home/anders/octosim/fractal/src/vortex.rs",
		"/home/anders/octosim/graphlib/src/guitk/toolkit_helpers.rs",
		"/home/anders/octosim/graphlib/src/graphlib.rs",
		"/home/anders/octosim/graphlib/src/graphhelpers.rs",
		"/home/anders/octosim/graphlib/src/menu.rs",
		"/home/anders/octosim/graphlib/src/mainmap.rs",
		"/home/anders/octosim/graphlib/src/vehicle_editors/land_vehicle_editor.rs",
		"/home/anders/octosim/graphlib/src/vehicle_editors/vehicle_editor_helpers.rs",
		"/home/anders/octosim/glsl/sliderball.vertex.glsl",
		"/home/anders/octosim/glsl/sliderball.geometry.glsl",
		"/home/anders/octosim/glsl/sliderball.fragment.glsl",
		"/home/anders/octosim/simlib/src/simlib/simlib.rs",
		"/home/anders/octosim/graphlib/src/vehicle_editors/aircraft_editor.rs",
		"/home/anders/octosim/compute_glsl/viewshed.glsl",
		"/home/anders/octosim/geom/src/lib.rs",
		"/home/anders/octosim/simlib/src/simlib/damage.rs",
		"/home/anders/octosim/graphlib/src/guitk/renderjob.rs",
		"/home/anders/octosim/graphlib/src/guitk/generic_toolkit.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/bitmap.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/button.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/checkbox.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/dropdown.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/listview.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/table_layout.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/textbox.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/vehicle_model.rs",
		"/home/anders/octosim/fractal/src/vec.rs",
		"/home/anders/octosim/fractal/src/vec_helper.rs",
		"/home/anders/octosim/fractal/src/meteo.rs",
		"/home/anders/octosim/fractal/src/meteo2.rs",
		"/home/anders/octosim/graphlib/Cargo.toml",
		"/home/anders/octosim/fractal/Cargo.toml",
		"/home/anders/octosim/iface/src/vector.rs",
		"/home/anders/octosim/compute_glsl/erosion.glsl",
		"/home/anders/octosim/sight/Cargo.toml",
		"/home/anders/octosim/sight/gpgpu.rs",
		"/home/anders/glium/src/uniforms/value.rs",
		"/home/anders/octosim/music/src/newmelody.rs",
		"/home/anders/octosim/graphlib/src/guitk/geometry.rs",
		"/home/anders/octosim/glsl/vehicle.geometry.glsl",
		"/home/anders/octosim/glsl/vehicle.fragment.glsl",
		"/home/anders/octosim/glsl/vehicle.vertex.glsl",
		"/home/anders/octosim/glsl/wireframe.vertex.glsl",
		"/home/anders/octosim/iface/src/lib.rs",
		"/home/anders/octosim/graphlib/src/vehicle_editors/jet_engine_editor.rs",
		"/home/anders/octosim/graphlib/src/vehicle_editors/piston_engine_editor.rs",
		"/home/anders/octosim/graphlib/src/vehicle_editors/mod.rs",
		"/home/anders/octosim/graphlib/src/guitk/glsl_reloader.rs",
		"/home/anders/octosim/graphlib/src/guitk/mod.rs",
		"/home/anders/octosim/graphlib/src/guitk/widgets/mod.rs",
		"/home/anders/octosim/pangohelper/src/lib.rs",
		"/home/anders/octosim/iface/src/store.rs",
		"/home/anders/octosim/simlib/src/simlib/jet.rs",
		"/home/anders/octosim/pangohelper/pango.c",
		"/home/anders/octosim/graphlib/src/aircraft_editor.rs",
		"/home/anders/octosim/graphlib/src/generic_toolkit.rs",
		"/home/anders/octosim/music/src/fft_fir.rs",
		"/home/anders/octosim/music/Cargo.toml",
		"/home/anders/octosim/simlib/src/simlib/landvehicle.rs",
		"/home/anders/octosim/simlib/src/simlib/ship.rs",
		"/home/anders/octosim/simlib/src/simlib/transport.rs",
		"/home/anders/octosim/simlib/src/simlib/engine.rs",
		"/home/anders/octosim/iface/src/abstract_pather.rs",
		"/home/anders/octosim/simlib/src/simlib/formation.rs",
		"/home/anders/octosim/graphlib/src/menu_renderer.rs",
		"/home/anders/octosim/graphlib/src/graphcommon.rs",
		"/home/anders/octosim/simlib/src/simlib/lib.rs",
		"/home/anders/octosim/simlib/Cargo.toml",
		"/home/anders/octosim/iface/Cargo.toml",
		"/home/anders/octosim/graphlib/Cargo.lock",
		"/home/anders/octosim/simlib/src/simlib/cannon.rs",
		"/home/anders/.config/sublime-text-3/Packages/User/octobuild.sublime-build",
		"/home/anders/octosim/pangohelper/Cargo.toml",
		"/home/anders/octosim/octosim.sublime-project",
		"/home/anders/octosim/iface/src/graphlib/src/menu.rs",
		"/home/anders/octosim/iface/src/simlib/src/simlib/simlib.rs",
		"/home/anders/octosim/iface/src/graphlib/src/menu_renderer.rs",
		"/checkout/src/libcore/result.rs",
		"/home/anders/.config/sublime-text-3/Packages/Rust Enhanced/RustEnhanced.sublime-settings",
		"/home/anders/.config/sublime-text-3/Packages/User/RustAutoComplete.sublime-settings",
		"/home/anders/.config/sublime-text-3/Packages/RustAutoComplete/Preferences.sublime-settings",
		"/home/anders/.config/sublime-text-3/Packages/anaconda_rust/AnacondaRUST.sublime-settings"
	],
	"find":
	{
		"height": 54.0
	},
	"find_in_files":
	{
		"height": 158.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"for Vec",
			"read_string",
			"deserialize_str",
			"from",
			"heap",
			"binaryheap",
			"bitvec",
			"Vector",
			"asdf",
			"field",
			"asdf",
			"test_ve",
			"Vec",
			"diff_vector",
			"diff_vec",
			"Vector",
			"SchemaVec",
			"for Vec",
			"for u8",
			"Option",
			"schema_u8",
			"read_u8",
			"write_u8",
			"for u8",
			"bool",
			"unexpected save",
			"serde",
			"diff_schema",
			"write_string",
			"compati",
			"fn save",
			"save",
			"fn save",
			"versions_As",
			"```",
			"struct",
			"reprc",
			"convert_fun",
			"serialized_type",
			"serialized_type\n",
			"split",
			":",
			"default_fn",
			"default_val",
			"asdf",
			"default_val",
			"default",
			"unexpected unsu",
			"println",
			"unexpected unsupport",
			"asdf",
			"attr_tag",
			"attr",
			"parse_attr_tag",
			"parse_attr_tag2",
			"::defa",
			"versions_As",
			"verinfo",
			"asdf",
			"::default()",
			"versions",
			"asdf",
			"version_Type",
			"litstr",
			"field_from_version",
			"AttrsResult",
			"attr",
			"allow",
			"_deserializer",
			"not inclu",
			"min_safe_ver",
			"min_safe_version",
			"ranges on field",
			"ident",
			"struct fieldinf",
			"Ok(",
			"deserialize(",
			"fn save",
			"input : Derive",
			"withschema",
			"not tuple",
			"impl Deserialize",
			"impl Deserializer",
			"schemaprimit",
			"withschema for i8",
			"withschema for",
			"get_enum_size",
			"unsupported repr",
			"//",
			"local_file_version",
			"println",
			"u16j",
			"u16",
			"reprc",
			"repr",
			"16",
			"u16",
			"enum_size",
			"deserialize",
			"fn ser",
			"fn save",
			"fn repr",
			"fn save",
			"syn::Parse",
			"enum_size",
			"unsupported repr",
			"size",
			"asdf",
			"parse",
			"asdf",
			"namevalue",
			"asdf",
			"namevalue",
			"asdf",
			"meta",
			"mod",
			"input.atts",
			"size",
			"//",
			"size\n",
			"fn savefile",
			"savefile",
			"enum",
			"reprc",
			"attrs",
			"enum",
			"repr",
			"skill"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"f32"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "savefile-derive/src/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48098,
						"regions":
						{
						},
						"selection":
						[
							[
								1576,
								1576
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1978.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "savefile/src/savefile.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58467,
						"regions":
						{
						},
						"selection":
						[
							[
								9603,
								9603
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9044.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "savefile/src/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13654,
						"regions":
						{
						},
						"selection":
						[
							[
								7648,
								7652
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7321.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "savefile-test/Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 263,
						"regions":
						{
						},
						"selection":
						[
							[
								252,
								252
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "savefile-test/src/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9570,
						"regions":
						{
						},
						"selection":
						[
							[
								4444,
								4444
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7245.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "savefile-derive/Cargo.lock",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1809,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "savefile-test/src/test_versioning.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5680,
						"regions":
						{
						},
						"selection":
						[
							[
								4640,
								4640
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9257.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "savefile-test/src/test_nested_non_repr_c.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 561,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								217
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "savefile-test/src/test_nested_repr_c.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 855,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": ".travis.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4080,
						"regions":
						{
						},
						"selection":
						[
							[
								4080,
								4080
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2774.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "savefile/src/prelude.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 294,
						"regions":
						{
						},
						"selection":
						[
							[
								293,
								293
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Rust/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "savefile-derive/Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 571,
						"regions":
						{
						},
						"selection":
						[
							[
								570,
								570
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "savefile/Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 590,
						"regions":
						{
						},
						"selection":
						[
							[
								496,
								496
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 54.0
	},
	"input":
	{
		"height": 58.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.diagnostics":
	{
		"height": 359.0
	},
	"output.exec":
	{
		"height": 395.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Rust Enhanced/RustEnhanced.sublime-build",
	"project": "savefile.sublime-project",
	"replace":
	{
		"height": 100.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/octosim/octosim.sublime-project"
			]
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 152.0,
		"last_filter": "UnitPres",
		"selected_items":
		[
			[
				"UnitPres",
				"UnitPresentation"
			]
		],
		"width": 440.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 481.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
